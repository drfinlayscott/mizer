% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/resource_dynamics.R
\name{resource_dynamics}
\alias{resource_dynamics}
\title{Description of the dynamics of unstructured resources}
\description{
Besides the size-structured planktonic resource, mizer can also model
unstructured resource components. Such unstructured components are
appropriate whenever the predation on these componente is not size based.
Examples include detritus as a resource for detritovores, carrion as a
resource for scavengers, or macroflora on which fish can graze.
}
\details{
Mizer allows an arbitrary number of unstructured components. The biomasses of
all components are collected into a named vector and stored in the \code{B} slot
of the \code{MizerSim} object. The initial value for \code{B} is stored in the
\code{initial_B} slot of the \code{MizerParams} object but can also be specified
explicitly as an argument to \code{\link[=project]{project()}}.
}
\section{Setting up a Model with Resources}{

You can set up a Mizer model with unstructured resource components using
the \code{\link[=set_multispecies_model]{set_multispecies_model()}} function. The arguments to that function that
relate to the resources are:
\itemize{
\item \code{rho} The encounter rate, see "Feeding on Resources" section below.
\item \code{resource_dynamics} Functions to update resource biomass during
simulations, see "Resource Dynamics" section below.
\item \code{resource_params} Model parameters for the resource dynamics, see
"Resource Dynamics" section below.
}

You can also set up the resource dynamics by hand by overwriting the
following slots in an existing \code{MizerParams} object:
\itemize{
\item \code{rho} A 3-dim array described in "Feeding on Resources" dynamics below
\item \code{resource_dynamics}
\item \code{resource_params}
}
}

\section{Feeding on Resources}{

We denote by \eqn{\rho_{id}(w)} the rate at which a predator of species
\eqn{i} and size \eqn{w} encounters biomass from the d-th unstructured
resource component. The contribution of the unstructured resources to the
total rate at which biomass is encountered by an individual of species \eqn{i}
and size \eqn{w} is thus
\deqn{\sum_d \rho_{id}(w) B_d.}
Resource consumption is subject to satiation in the same way as other food,
so that a consumer only consumes a fraction \eqn{1-f_i(w)} of the encountered
resource biomass, where \eqn{f_i(w)} is the feeding level.

A sensible assumption for the size dependence of the encounter rate is that
it scales allometrically with the same exponent as the maximum intake rate,
so that
\deqn{\rho_{id}(w) = \rho_{id} w^n.}
This is the default set by \code{\link[=setResourceEncounter]{setResourceEncounter()}} which is called
automatically when you set up the model with the \code{\link[=set_multispecies_model]{set_multispecies_model()}}
function. However you can always overwrite it with your own choice using the
\code{\link[=setResourceEncounter]{setResourceEncounter()}} function.
}

\section{Resource Dynamics}{

During a simulation using \code{\link[=project]{project()}}, the biomasses of the resources is
updated at each time step by calling the functions specified in the
\code{resource_dynamics} slot of the \code{MizerParams} object. This slot holds a
vector of functions, one for each unstructured resource component. Mizer
provides two functions that you can use: \code{\link[=detritus_dynamics]{detritus_dynamics()}} and
\code{\link[=carrion_dynamics]{carrion_dynamics()}}, but you can easily implement others by following those
templates.

As you can see in the documentation of these functions, their arguments are:
the \code{MizerParams} object \code{params}, the current fish size spectra \code{n}, the
current plankton spectrum \code{n_pp}, the current resource biomasses \code{B} and the current
rates calculated by the \code{\link[=getRates]{getRates()}} function. This last argument is passed
for efficiency reasons, so that the rates do not have to be recomputed. See
the documentation of \code{\link[=getRates]{getRates()}} for a list of what it contains.

The other arguments to the resource dynamics functions are model parameters,
like for example growth rates.
These need to be stored in the \code{resource_params} slot of \code{params}. One model
parameter that should always be present is the rate of change due to external
causes. This should be given a name of the form \code{resource_external} where
\code{resource} should be replaced by the name of the resource, see for example
\code{detritus_external} in \code{\link[=detritus_dynamics]{detritus_dynamics()}}

When writing your own resource dynamics functions, you can choose any names
for your other model parameters, but you must make sure not to use the same
name in the function for another resource component. One way to ensure this
is to prefix all parameter namse with your resource name.

The dynamics for a resource should always have a loss term accounting for
the consumption of the resource. This should always have the form used in the
example function \code{\link[=detritus_dynamics]{detritus_dynamics()}}, in order to be in agreement with the
feeding by consumers described above in the "Feeding on Resources" section.
}

