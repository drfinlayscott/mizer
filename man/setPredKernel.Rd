% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/MizerParams-class.R
\name{setPredKernel}
\alias{setPredKernel}
\title{Set predation kernel}
\usage{
setPredKernel(params, pred_kernel = NULL,
  pred_kernel_type = "lognormal", store_kernel = FALSE)
}
\arguments{
\item{params}{A MizerParams object}

\item{pred_kernel}{Optional. An array (species x predator size x prey size)
that holds the predation coefficient of each predator at size on each prey
size. The dimensions are thus no_sp, no_w, no_w_full.}

\item{pred_kernel_type}{Only used if \code{pred_kernel} is not supplied. A
string that determines which predation kernel function is used. Default is
"lognormal". See Details section.}

\item{store_kernel}{Only used if \code{pred_kernel} is not supplied. A
boolean flag that determines whether the full three dimensional predation
kernel array is calculated and stored, even though it is not needed by
mizer. Only useful if you have your own code that relies on this array.
Default is FALSE.}
}
\value{
A MizerParams object
}
\description{
The predation kernel determines the distribution of prey sizes that a
predator feeds on. It is used in \code{\link{getEncounter}} when calculating
the rate at which food is encountered and in \code{\link{getPredRate}} when
calculating the rate at which a prey is predated upon. The predation kernel
can be a function of the predator/prey size ratio or it can be a function of
the predator size and the prey size separately. Both types can be set up with
this function.
}
\section{Kernel dependent on predator to prey size ratio}{


If the \code{pred_kernel} argument is not supplied, then this function sets a
predation kernel that depends only on the ratio of predator mass to prey
mass, not on the two masses independently. The shape of that kernel is then
determined by the \code{pred_kernel_type} argument.

The default pred_kernel_type is "lognormal". This will call the function
\code{\link{lognormal_pred_kernel}} to calculate the predation kernel and the
function \code{\link{lognormal_max_ppmr}} to return the maximal predator/prey
mass ratio for each species.

An alternative pred_kernel type is "box", implemented by the functions
\code{\link{box_pred_kernel}} and \code{\link{box_max_ppmr}}.

You can use any other string as the type. If for example you choose "my" then
you need to define a function \code{my_pred_kernel} that you can model on the
existing functions like \code{\link{lognormal_pred_kernel}}. You can also
define a function \code{my_max_ppmr} if you want the smallest plankton size
to be calculated automatically by \code{\link{set_multispecies_model}},
otherwise you need to specify the \code{min_w_pp} argument explicitly.

When using a kernel dependent on the predator/prey size ratio only, mizer
does not need to store the entire three dimensional array in the MizerParams
object. Such an array can be very big when there is a large number of size
bins. Instead mizer only needs to store two two-dimensional arrays that hold
Fourier transforms of the feeding kernel function that allow the encounter
rate and the predation rate to be calculated very efficiently. However mizer
gives you the option of storing the full three-dimensional array anyway by
setting \code{store_kernel = TRUE}. This might be useful if you have code for
analysing the results of a mizer simulation that relies on the full array.
}

\section{Kernel dependent on both predator and prey size}{


If you want to work with a feeding kernel that depends on predator mass and
prey mass independently, you can specify the full feeding kernel as a
three-dimensional array (predator species x predator size x prey size).

You should use this option only if a kernel dependent only on the
predator/prey mass ratio is not appropriate. Using a kernel dependent on
predator/prey mass ratio only allows mizer to use fast Fourier transform
methods to significantly reduce the running time of simulations.

The order of the predator species in \code{pred_kernel} should be the same
as the order in the species params dataframe. If you supply a named array
then the function will check the order and warn if it is different.
}

\examples{
\dontrun{
## Set up a MizerParams object
data(NS_species_params_gears)
data(inter)
params <- set_multispecies_model(NS_species_params_gears, inter)

## If you change predation kernel parameters after setting up a model, you
# need to call setPredKernel
params@species_params$beta["Cod"] <- 200
params <- setPredKernel(params)

## You can change to a different predation kernel type
params <- setPredKernel(params, pred_kernel_type = "box")
}
}
